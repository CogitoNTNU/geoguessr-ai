#!/usr/bin/env python3
"""
Visualization script for Street View points generated by run_sampling.py
Creates an interactive HTML map showing all the sampled points with Street View coverage.
"""

import json
import os


def create_sv_points_map(
    input_file="data/out/sv_points.json",
    candidate_file="data/out/candidate_points.json",
    output_file="sv_points_map.html",
):
    """Create an interactive map of Street View points."""

    if not os.path.exists(input_file):
        print(f"Error: {input_file} not found!")
        print("Make sure you've run the sampling script first.")
        return

    # Load the Street View points
    with open(input_file, "r") as f:
        sv_points = json.load(f)

    if not sv_points:
        print("No Street View points found in the data file.")
        return

    # Load candidate points if available
    num_candidates = 0
    if os.path.exists(candidate_file):
        with open(candidate_file, "r") as f:
            candidate_points = json.load(f)
            num_candidates = len(candidate_points)

    # Calculate center point
    avg_lat = sum(point["lat"] for point in sv_points) / len(sv_points)
    avg_lon = sum(point["lon"] for point in sv_points) / len(sv_points)

    # Calculate success rate if we have candidate data
    success_rate = (
        (len(sv_points) / num_candidates * 100) if num_candidates > 0 else None
    )

    # Convert to GeoJSON format
    point_features = []
    for i, point in enumerate(sv_points):
        feature = {
            "type": "Feature",
            "geometry": {"type": "Point", "coordinates": [point["lon"], point["lat"]]},
            "properties": {
                "id": i,
                "lat": point["lat"],
                "lon": point["lon"],
                "type": "street_view_point",
            },
        }
        point_features.append(feature)

    points_geojson = {"type": "FeatureCollection", "features": point_features}

    # Create HTML map
    html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Street View Points Visualization</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        body {{
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }}
        #map {{
            height: 100vh;
            width: 100%;
        }}
        .info {{
            position: absolute;
            top: 10px;
            left: 10px;
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 300px;
        }}
        .controls {{
            position: absolute;
            top: 10px;
            right: 10px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 1000;
        }}
        .stats {{
            margin-top: 10px;
            font-size: 14px;
            color: #666;
        }}
    </style>
</head>
<body>
    <div class="info">
        <h3>üó∫Ô∏è Street View Points</h3>
        <p><strong>SV Points:</strong> {len(sv_points):,}</p>
        {"<p><strong>Candidates:</strong> " + f"{num_candidates:,}</p>" if num_candidates > 0 else ""}
        {"<p><strong>Success Rate:</strong> " + f"{success_rate:.1f}%</p>" if success_rate is not None else ""}
        <div class="stats">
            <p>‚úÖ All points have confirmed Street View coverage</p>
            <p>üìç Click any point for coordinates</p>
            <p>üîç Zoom in to see individual points clearly</p>
        </div>
    </div>
    
    <div class="controls">
        <label><input type="checkbox" id="togglePoints" checked> Show Points</label><br>
        <label><input type="checkbox" id="toggleClusters" checked> Cluster Points</label>
    </div>
    
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css" />
    
    <script>
        // Initialize the map
        var map = L.map('map').setView([{avg_lat}, {avg_lon}], 5);

        // Add tile layer
        L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png', {{
            attribution: '¬© OpenStreetMap contributors'
        }}).addTo(map);

        // Points GeoJSON data
        var pointsData = {json.dumps(points_geojson, indent=2)};
        
        // Create marker cluster group
        var markers = L.markerClusterGroup({{
            chunkedLoading: true,
            maxClusterRadius: 50
        }});
        
        // Create individual markers group
        var individualMarkers = L.layerGroup();
        
        // Add points to both groups
        pointsData.features.forEach(function(feature) {{
            var lat = feature.geometry.coordinates[1];
            var lon = feature.geometry.coordinates[0];
            
            // Create marker
            var marker = L.circleMarker([lat, lon], {{
                radius: 4,
                fillColor: "#ff7800",
                color: "#cc4400",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.8
            }});
            
            // Add popup
            marker.bindPopup(
                '<b>Street View Point ' + feature.properties.id + '</b><br/>' +
                'Latitude: ' + lat.toFixed(6) + '<br/>' +
                'Longitude: ' + lon.toFixed(6) + '<br/>' +
                '<a href="https://www.google.com/maps/@' + lat + ',' + lon + ',3a,75y,90t/data=!3m6!1e1" target="_blank">üîó Open in Street View</a>'
            );
            
            // Add to both groups
            markers.addLayer(marker);
            individualMarkers.addLayer(marker);
        }});
        
        // Add clustered markers by default
        map.addLayer(markers);
        
        // Controls
        var currentLayer = markers;
        var usesClusters = true;
        
        document.getElementById('togglePoints').addEventListener('change', function(e) {{
            if (e.target.checked) {{
                map.addLayer(currentLayer);
            }} else {{
                map.removeLayer(currentLayer);
            }}
        }});
        
        document.getElementById('toggleClusters').addEventListener('change', function(e) {{
            map.removeLayer(currentLayer);
            
            if (e.target.checked) {{
                currentLayer = markers;
                usesClusters = true;
            }} else {{
                currentLayer = individualMarkers;
                usesClusters = false;
            }}
            
            if (document.getElementById('togglePoints').checked) {{
                map.addLayer(currentLayer);
            }}
        }});
        
        // Fit map to show all points
        if (pointsData.features.length > 0) {{
            var group = new L.featureGroup([markers]);
            map.fitBounds(group.getBounds().pad(0.1));
        }}
        
        // Add scale
        L.control.scale().addTo(map);
    </script>
</body>
</html>"""

    # Write the HTML file
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_content)

    print(f"‚úÖ Visualization created: {output_file}")
    print(f"üìä Showing {len(sv_points):,} Street View points")
    print(f"üåç Center: {avg_lat:.4f}, {avg_lon:.4f}")
    print("üöÄ Open the file in your browser to view the interactive map!")

    # Try to open in browser
    try:
        import webbrowser

        file_path = os.path.abspath(output_file)
        webbrowser.open(f"file://{file_path}")
        print("üåê Map opened in your default browser!")
    except Exception as e:
        print(f"Could not auto-open browser: {e}")
        print(f"Please manually open: {os.path.abspath(output_file)}")


if __name__ == "__main__":
    create_sv_points_map()
